package org.kektagen.glasscroft;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.StrictMode;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Toast;

import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Scanner;

//this is all one activity, fuck you
public class MainActivity extends Activity {
    public TextToSpeech mSpeech;
    /**
     * {@link CardScrollView} to use as the main content view.
     */
    public String coolString = "meme";
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;
    public void quitApp() {
        mSpeech.shutdown();
        MainActivity.this.finish();
        finishAffinity();
        System.exit(0);
    }
    //we need the app to only run for a very short amount of time and not after that, so we completely kill it once we're done
    public String getResp(String request) {
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();

        StrictMode.setThreadPolicy(policy);
        try {
            //this makes the http request (wild i know)
            //its on main thread because im a lazy piece of shit who doesnt know how to do async stuff
            URL serverUrl = new URL("YOUR URL");
            System.out.println(serverUrl);
            URLConnection urlConnection = serverUrl.openConnection();
            HttpURLConnection httpConnection = (HttpURLConnection) urlConnection;
            httpConnection.setRequestMethod("POST");
            httpConnection.setRequestProperty("Content-Type", "application/json");
            httpConnection.setDoOutput(true);

            BufferedWriter httpRequestBodyWriter = new BufferedWriter(new
                    OutputStreamWriter(httpConnection.getOutputStream()));
            String jsonformatted = String.format("{\"request\": \"%s\"}",request);
            Log.d("json req", jsonformatted);
            httpRequestBodyWriter.write(jsonformatted);
            httpRequestBodyWriter.close();
            String response = httpConnection.getResponseMessage();
            System.out.println("response" + response);
            if (httpConnection.getInputStream() == null) {
                System.out.println("No stream");
                return "No stream";
            }
            Scanner httpResponseScanner = new Scanner(httpConnection.getInputStream());
            String resp = "";
            while (httpResponseScanner.hasNext()) {
                String line = httpResponseScanner.nextLine();
                resp += line;
                System.out.println(line);
            }
            //i have no idea what any of this means, i just copy-pasted it from a tutorial so dont ask me to fix it
            return resp;
        } catch (Exception e) {
            e.printStackTrace();
        }
        //we shouldn't ever get to this point, but sometimes it randomly decides to do that so uhh whatever just have it say error
        return "Error";
    }
    public String meme(ArrayList<String> theFunny) {

        System.out.println("running the meme");
        System.out.println(theFunny);
        //the voice request returns an array that will only ever have one index so we just get that index and assign it to the request variable
        String req = theFunny.get(0);
        String resp = getResp(req);
        String properstatement = "";
        String[] splitstring = resp.split("\\^");
        /* 
        the format for responses made by the server is '^statement one^statement two' so we need to split it into an array to be able to use it properly
        i mean not really but this is what i did at the time and im not changing it
        */
        System.out.println("string array len " + splitstring.length);
        try {
            for (int i = 0; i <= splitstring.length; i++) {
                System.out.println(splitstring[i]);
                properstatement = properstatement + " " + splitstring[i];
            }
        } catch (Exception e) {
            //this will always error out with an outofbounds error because im stupid but it should be fine if we ignore the error
            e.printStackTrace();
        }
        coolString = properstatement;
        View aview = new CardBuilder(this, CardBuilder.Layout.TEXT)
                .setText(coolString)
                .showStackIndicator(true)
                .getView();
        setContentView(aview);
        buildView(coolString);
        System.out.println("we did the variable meme");
        //we call lool inside of the onInit class so we need a final variable
        final String lool = properstatement;
        System.out.println(properstatement);
        coolString = properstatement;
        //i forget why we do this

        setContentView(aview);
        buildView(coolString);
        mSpeech = new TextToSpeech(this, new TextToSpeech.OnInitListener() {
            @Override
            public void onInit(int status) {
                // the speak call breaks if its not called in the onInit function
                mSpeech.speak(lool, TextToSpeech.QUEUE_FLUSH, null);
            }
        });
        mView.invalidate();

        return coolString;
    }
    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        ArrayList<String> voiceResults = getIntent().getExtras()
                .getStringArrayList(RecognizerIntent.EXTRA_RESULTS);
        //get the data from the voice request at launch

        mView = buildView("Placeholder");
        mSpeech = new TextToSpeech(this, new TextToSpeech.OnInitListener() {
            @Override
            public void onInit(int status) {
                // Do nothing.
            }
        });
        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }

        });

        //then call the function to do stuff with the request
        meme(voiceResults);
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        quitApp();
        mCardScroller.deactivate();
        super.onPause();
    }
    private View buildView(String text) {
        System.out.println("we do the render meme " + coolString);
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText("i give up just listen to the audio");
        return card.getView();
    }

}
